// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Chalk                   = require("chalk");
var Printf                  = require("bs-platform/lib/js/printf.js");
var Utils$ReasonTemplate    = require("./utils.js");
var Patches                 = require("../../../../src/patches");
var Bindings$ReasonTemplate = require("./bindings.js");

function prepareTargetDirectory(_, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "looking for source directory");
  var sourcePath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          source,
          /* [] */0
        ]
      ]);
  var outputPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "lib",
          /* :: */[
            "js",
            /* :: */[
              source,
              /* [] */0
            ]
          ]
        ]
      ]);
  if (Utils$ReasonTemplate.Fs[/* safeFileExists */0](sourcePath)) {
    Bindings$ReasonTemplate.paint(/* None */0, "creating target directory");
    return Utils$ReasonTemplate.Fs[/* safeCreateDirectory */1](outputPath);
  } else {
    return /* false */0;
  }
}

function createBuildingConfig(_, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "looking for building config");
  var configPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "bsconfig.json",
          /* [] */0
        ]
      ]);
  var packagePath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "package.json",
          /* [] */0
        ]
      ]);
  var contents = Patches.generateConfigContents(source, packagePath);
  if (Utils$ReasonTemplate.Fs[/* safeFileExists */0](configPath)) {
    return /* true */1;
  } else {
    Bindings$ReasonTemplate.paint(/* None */0, "creating building config");
    return Utils$ReasonTemplate.Fs[/* safeCreateFile */2](configPath, contents);
  }
}

function createLintingConfig(_, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "looking for linting config");
  var configPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          ".merlin",
          /* [] */0
        ]
      ]);
  var nodeModulesPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "node_modules",
          /* [] */0
        ]
      ]);
  var contents = Patches.generateMerlinContents(source, nodeModulesPath);
  if (Utils$ReasonTemplate.Fs[/* safeFileExists */0](configPath)) {
    return /* true */1;
  } else {
    Bindings$ReasonTemplate.paint(/* None */0, "creating linting config");
    return Utils$ReasonTemplate.Fs[/* safeCreateFile */2](configPath, contents);
  }
}

function performLinking(name, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "seeing if we can make a symlink");
  var nodeModulesPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "node_modules",
          /* [] */0
        ]
      ]);
  var symlinkPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "node_modules",
          /* :: */[
            name,
            /* [] */0
          ]
        ]
      ]);
  var outputPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "lib",
          /* :: */[
            "js",
            /* :: */[
              source,
              /* [] */0
            ]
          ]
        ]
      ]);
  if (!Utils$ReasonTemplate.Fs[/* safeFileExists */0](nodeModulesPath)) {
    Utils$ReasonTemplate.Fs[/* safeCreateDirectory */1](nodeModulesPath);
  }
  if (Utils$ReasonTemplate.Fs[/* safeFileExists */0](symlinkPath)) {
    Bindings$ReasonTemplate.failure("file with the name \"" + (name + "\" already exists in your node_modules, so we cannot create a symlink here."));
    return /* false */0;
  } else {
    Bindings$ReasonTemplate.paint(/* None */0, "making symlink to output directory");
    var match = Utils$ReasonTemplate.Fs[/* safeCreateSymlink */3](outputPath, symlinkPath);
    if (match !== 0) {
      return /* true */1;
    } else {
      Bindings$ReasonTemplate.failure("something went wrong when creating the symlink");
      return /* false */0;
    }
  }
}

function createPostinstall(name, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "preparing to add a postinstall script");
  var packagePath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "package.json",
          /* [] */0
        ]
      ]);
  var source$1 = Utils$ReasonTemplate.Path[/* combinePaths */1](/* Some */[/* false */0], /* :: */[
        "..",
        /* :: */[
          "lib",
          /* :: */[
            "js",
            /* :: */[
              source,
              /* [] */0
            ]
          ]
        ]
      ]);
  var dest = Utils$ReasonTemplate.Path[/* combinePaths */1](/* Some */[/* false */0], /* :: */[
        ".",
        /* :: */[
          "node_modules",
          /* :: */[
            name,
            /* [] */0
          ]
        ]
      ]);
  var command = Curry._2(Printf.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "node -e \"var s='",
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* String_literal */Block.__(11, [
                        "',d='",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "',fs=require('fs');if(fs.existsSync(d)===false){fs.symlinkSync(s,d,'dir')};\"",
                                /* End_of_format */0
                              ])
                          ])
                      ])
                  ])
              ]),
            "node -e \"var s='%s',d='%s',fs=require('fs');if(fs.existsSync(d)===false){fs.symlinkSync(s,d,'dir')};\""
          ]), source$1, dest);
  Bindings$ReasonTemplate.paint(/* None */0, "adding the postinstall script to your package file");
  return +Patches.editPackageScripts(packagePath, command);
}

function execute(_steps, name, source, root) {
  while(true) {
    var steps = _steps;
    if (steps) {
      var rest = steps[1];
      var step = steps[0];
      if (rest) {
        var match = Curry._3(step, name, source, root);
        if (match !== 0) {
          _steps = rest;
          continue ;
          
        } else {
          return /* false */0;
        }
      } else {
        return Curry._3(step, name, source, root);
      }
    } else {
      return /* true */1;
    }
  };
}

function main(name, source, root, version, linking) {
  process.stdout.write(Chalk.bold(Chalk.white(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "add-reason setup v",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "\n" */10,
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "add-reason setup v%s\n"
                      ]), version))));
  var stepsAsFunctions = linking !== 0 ? /* :: */[
      prepareTargetDirectory,
      /* :: */[
        createBuildingConfig,
        /* :: */[
          createLintingConfig,
          /* :: */[
            performLinking,
            /* :: */[
              createPostinstall,
              /* [] */0
            ]
          ]
        ]
      ]
    ] : /* :: */[
      prepareTargetDirectory,
      /* :: */[
        createBuildingConfig,
        /* :: */[
          createLintingConfig,
          /* [] */0
        ]
      ]
    ];
  var finishWithFailure = execute(stepsAsFunctions, name, source, root);
  if (finishWithFailure !== 0) {
    Bindings$ReasonTemplate.success(/* () */0);
  }
  process.stdout.write("\n");
  return /* () */0;
}

exports.prepareTargetDirectory = prepareTargetDirectory;
exports.createBuildingConfig   = createBuildingConfig;
exports.createLintingConfig    = createLintingConfig;
exports.performLinking         = performLinking;
exports.createPostinstall      = createPostinstall;
exports.execute                = execute;
exports.main                   = main;
/* chalk Not a pure module */
