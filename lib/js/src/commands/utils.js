// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs       = require("fs");
var Path     = require("path");
var Curry    = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var FsExtra  = require("fs-extra");

function execute(_steps, name, source, root) {
  while(true) {
    var steps = _steps;
    if (steps) {
      var rest = steps[1];
      var step = steps[0];
      if (rest) {
        var match = Curry._3(step, name, source, root);
        if (match !== 0) {
          _steps = rest;
          continue ;
          
        } else {
          return /* false */0;
        }
      } else {
        return Curry._3(step, name, source, root);
      }
    } else {
      return /* true */1;
    }
  };
}

function cleanPath(path) {
  var size = path.length;
  var first = $$String.sub(path, 0, 1);
  var last = $$String.sub(path, size - 1 | 0, 1);
  var starting = first === Path.sep ? 1 : 0;
  var ending = last === Path.sep ? (size - starting | 0) - 1 | 0 : size - starting | 0;
  return $$String.sub(path, starting, ending);
}

function combinePaths($staropt$star, paths) {
  var useLeadingSlash = $staropt$star ? $staropt$star[0] : /* true */1;
  var prefix = useLeadingSlash !== 0 ? Path.sep : "";
  var combine = function (_paths, _result) {
    while(true) {
      var result = _result;
      var paths = _paths;
      if (paths) {
        var rest = paths[1];
        var path = paths[0];
        if (rest) {
          var result$1 = result + (cleanPath(path) + Path.sep);
          _result = result$1;
          _paths = rest;
          continue ;
          
        } else {
          return result + cleanPath(path);
        }
      } else {
        return result;
      }
    };
  };
  return prefix + combine(paths, "");
}

function removeTopFromPath(path) {
  var path$1 = Path.sep + cleanPath(path);
  var pos = path$1.length - 1 | 0;
  var finalPath = path$1;
  while(pos >= 0) {
    var cur = $$String.sub(path$1, pos, 1);
    if (cur === Path.sep) {
      finalPath = $$String.sub(path$1, 0, pos);
      pos = -1;
    } else {
      pos = pos - 1 | 0;
    }
  };
  return finalPath;
}

var Path$1 = /* module */[
  /* cleanPath */cleanPath,
  /* combinePaths */combinePaths,
  /* removeTopFromPath */removeTopFromPath
];

function safeFileExists(file) {
  try {
    +Fs.lstatSync(file);
    return /* true */1;
  }
  catch (exn){
    return /* false */0;
  }
}

function safeCreateDirectory(dir) {
  try {
    FsExtra.ensureDirSync(dir);
    return /* true */1;
  }
  catch (exn){
    return /* false */0;
  }
}

function safeCreateFile(file, contents) {
  try {
    Fs.writeFileSync(file, contents);
    return /* true */1;
  }
  catch (exn){
    return /* false */0;
  }
}

function safeCreateSymlink(source, dest) {
  try {
    Fs.symlinkSync(source, dest);
    return /* true */1;
  }
  catch (exn){
    return /* false */0;
  }
}

var Fs$1 = /* module */[
  /* safeFileExists */safeFileExists,
  /* safeCreateDirectory */safeCreateDirectory,
  /* safeCreateFile */safeCreateFile,
  /* safeCreateSymlink */safeCreateSymlink
];

exports.execute = execute;
exports.Path    = Path$1;
exports.Fs      = Fs$1;
/* fs Not a pure module */
