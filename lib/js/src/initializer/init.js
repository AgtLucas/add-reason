// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                           = require("bs-platform/lib/js/list.js");
var Block                          = require("bs-platform/lib/js/block.js");
var Curry                          = require("bs-platform/lib/js/curry.js");
var Chalk                          = require("chalk");
var Printf                         = require("bs-platform/lib/js/printf.js");
var LodashCamelcase                = require("lodash.camelcase");
var Utils$ReasonTemplate           = require("./utils.js");
var Patches                        = require("../../../../src/patches");
var GenericBindings$ReasonTemplate = require("./genericBindings.js");

var defaultCompiledPath = "/lib/js";

var defaultNodeModulesPath = "node_modules";

var bsConfigFile = "bsconfig.json";

var merlinFile = ".merlin";

function buildRelativeSymlinkPaths(name, directory) {
  var source = Utils$ReasonTemplate.Path[/* combinePaths */1](/* Some */[/* false */0], /* :: */[
        "..",
        /* :: */[
          defaultCompiledPath,
          /* :: */[
            directory,
            /* [] */0
          ]
        ]
      ]);
  var dest = Utils$ReasonTemplate.Path[/* combinePaths */1](/* Some */[/* false */0], /* :: */[
        ".",
        /* :: */[
          defaultNodeModulesPath,
          /* :: */[
            name,
            /* [] */0
          ]
        ]
      ]);
  return /* tuple */[
          source,
          dest
        ];
}

function getCompleteMessage(finishWithFailure, name) {
  if (finishWithFailure !== 0) {
    return Curry._2(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                " See which step went wrong",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "%s%s See which step went wrong"
                  ]), GenericBindings$ReasonTemplate.getEmoji("no_entry_sign"), Chalk.red("fail"));
  } else {
    var pkg = Chalk.bold(Curry._2(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "const ",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " = require('",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "');",
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "const %s = require('%s');"
                ]), LodashCamelcase(name), name));
    var example = Curry._6(Printf.sprintf(/* Format */[
              /* String_literal */Block.__(11, [
                  "Import your compiled ReasonML code like:\n",
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* Char_literal */Block.__(12, [
                                  /* " " */32,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* "\n" */10,
                                          /* String */Block.__(2, [
                                              /* No_padding */0,
                                              /* Char_literal */Block.__(12, [
                                                  /* "\n" */10,
                                                  /* String */Block.__(2, [
                                                      /* No_padding */0,
                                                      /* Char_literal */Block.__(12, [
                                                          /* "\n" */10,
                                                          /* String */Block.__(2, [
                                                              /* No_padding */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ])
                ]),
              "Import your compiled ReasonML code like:\n%s\n%s %s\n%s\n%s\n%s"
            ]), Chalk.gray("1 " + GenericBindings$ReasonTemplate.altLong), Chalk.gray("2 " + GenericBindings$ReasonTemplate.altLong), pkg, Chalk.gray("3 " + GenericBindings$ReasonTemplate.altLong), Chalk.gray("4 " + (GenericBindings$ReasonTemplate.altLong + " // rest of code...")), Chalk.gray("5 " + GenericBindings$ReasonTemplate.altLong));
    return Curry._4(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* " " */32,
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s%s\n%s %s"
                  ]), GenericBindings$ReasonTemplate.getEmoji("sparkles"), Chalk.green("done"), Chalk.green("success"), example);
  }
}

function checkIfBsPlatformIsInstalled(rootDirectory) {
  return Utils$ReasonTemplate.FsPolyfill[/* safeFileExists */0](Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
                  rootDirectory,
                  /* :: */[
                    defaultNodeModulesPath,
                    /* :: */[
                      "bs-platform",
                      /* [] */0
                    ]
                  ]
                ]));
}

function performLinking(position, name, directory, rootDirectory) {
  var linkToNodeModules = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          defaultNodeModulesPath,
          /* [] */0
        ]
      ]);
  var source = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          defaultCompiledPath,
          /* :: */[
            directory,
            /* [] */0
          ]
        ]
      ]);
  var dest = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        linkToNodeModules,
        /* :: */[
          name,
          /* [] */0
        ]
      ]);
  return Utils$ReasonTemplate.FsPolyfill[/* attemptToLink */2](position, source, dest);
}

function performConfigCreation(position, _, directory, rootDirectory) {
  var absolutePath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          bsConfigFile,
          /* [] */0
        ]
      ]);
  var packageLocation = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          "package.json",
          /* [] */0
        ]
      ]);
  var configContents = Patches.generateConfigContents(directory, packageLocation);
  return Utils$ReasonTemplate.FsPolyfill[/* attemptToCreateConfig */3](position, absolutePath, configContents);
}

function performMerlinCreation(position, _, directory, rootDirectory) {
  var absolutePath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          merlinFile,
          /* [] */0
        ]
      ]);
  var nodeModulesLocation = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          defaultNodeModulesPath,
          /* [] */0
        ]
      ]);
  var configContents = Patches.generateMerlinContents(directory, nodeModulesLocation);
  return Utils$ReasonTemplate.FsPolyfill[/* attemptToCreateMerlin */4](position, absolutePath, configContents);
}

function performEndpointSetup(position, _, directory, rootDirectory) {
  var position$1 = Chalk.gray(Curry._2(Printf.sprintf(/* Format */[
                /* Char_literal */Block.__(12, [
                    /* "[" */91,
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Char_literal */Block.__(12, [
                            /* "/" */47,
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* Char_literal */Block.__(12, [
                                    /* "]" */93,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "[%d/%d]"
              ]), position[0], position[1]));
  var directoryPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          directory,
          /* [] */0
        ]
      ]);
  var lib = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          "lib",
          /* [] */0
        ]
      ]);
  var lib_js = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        lib,
        /* :: */[
          "js",
          /* [] */0
        ]
      ]);
  var lib_js_name = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        lib_js,
        /* :: */[
          directory,
          /* [] */0
        ]
      ]);
  var existsDirectory = Utils$ReasonTemplate.FsPolyfill[/* safeFileExists */0](directoryPath);
  var existsLib = Utils$ReasonTemplate.FsPolyfill[/* safeFileExists */0](lib);
  var existsLibJs = Utils$ReasonTemplate.FsPolyfill[/* safeFileExists */0](lib_js);
  var existsLibJsName = Utils$ReasonTemplate.FsPolyfill[/* safeFileExists */0](lib_js_name);
  if (existsDirectory !== 0) {
    if (existsLib !== 0) {
      if (existsLibJs !== 0) {
        if (existsLibJsName !== 0) {
          console.log(Curry._3(Printf.sprintf(/* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        "Validating target... ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "%s %sValidating target... %s"
                      ]), position$1, GenericBindings$ReasonTemplate.getEmoji("open_file_folder"), Chalk.green("success")));
          return /* true */1;
        } else {
          var createDirsSuccess = Utils$ReasonTemplate.FsPolyfill[/* safeCreateDirectory */1](lib_js_name);
          var result = createDirsSuccess ? Chalk.yellow("warning") + " You already have a `lib/js` directory, so we're going to use it." : Curry._3(Printf.sprintf(/* Format */[
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " Something went wrong when trying to create target directories.\n",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      "%s Something went wrong when trying to create target directories.\n%s%s"
                    ]), Chalk.red("failed"), GenericBindings$ReasonTemplate.altCodeDirectional, Chalk.bold(lib_js_name));
          console.log(Curry._3(Printf.sprintf(/* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        "Validating target... ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "%s %sValidating target... %s"
                      ]), position$1, GenericBindings$ReasonTemplate.getEmoji("open_file_folder"), result));
          return /* true */1;
        }
      } else {
        var createDirsSuccess$1 = Utils$ReasonTemplate.FsPolyfill[/* safeCreateDirectory */1](lib_js_name);
        var result$1 = createDirsSuccess$1 ? Chalk.yellow("warning") + " You already have a `lib` directory, so we're going to use it." : Curry._3(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            " Something went wrong when trying to create target directories.\n",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "%s Something went wrong when trying to create target directories.\n%s%s"
                  ]), Chalk.red("failed"), GenericBindings$ReasonTemplate.altCodeDirectional, Chalk.bold(lib_js_name));
        console.log(Curry._3(Printf.sprintf(/* Format */[
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* Char_literal */Block.__(12, [
                              /* " " */32,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "Validating target... ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "%s %sValidating target... %s"
                    ]), position$1, GenericBindings$ReasonTemplate.getEmoji("open_file_folder"), result$1));
        return /* true */1;
      }
    } else {
      var createDirsSuccess$2 = Utils$ReasonTemplate.FsPolyfill[/* safeCreateDirectory */1](lib_js_name);
      var result$2 = createDirsSuccess$2 ? Chalk.green("success") : Curry._3(Printf.sprintf(/* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String_literal */Block.__(11, [
                          " Something went wrong when trying to create target directories.\n",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ]),
                  "%s Something went wrong when trying to create target directories.\n%s%s"
                ]), Chalk.red("failed"), GenericBindings$ReasonTemplate.altCodeDirectional, Chalk.bold(lib_js_name));
      console.log(Curry._3(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* " " */32,
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    "Validating target... ",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s %sValidating target... %s"
                  ]), position$1, GenericBindings$ReasonTemplate.getEmoji("open_file_folder"), result$2));
      return createDirsSuccess$2;
    }
  } else {
    console.log(Curry._5(Printf.sprintf(/* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* Char_literal */Block.__(12, [
                          /* " " */32,
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "Validating target... ",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* String_literal */Block.__(11, [
                                          " Couldn't find your source directory of ReasonML code. Do you have a typo?\n",
                                          /* String */Block.__(2, [
                                              /* No_padding */0,
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "%s %sValidating target... %s Couldn't find your source directory of ReasonML code. Do you have a typo?\n%s%s"
                ]), position$1, GenericBindings$ReasonTemplate.getEmoji("open_file_folder"), Chalk.red("failed"), GenericBindings$ReasonTemplate.altCodeDirectional, Chalk.bold(directoryPath)));
    return /* false */0;
  }
}

function performPostInstall(position, name, directory, rootDirectory) {
  var match = buildRelativeSymlinkPaths(name, directory);
  var dest = match[1];
  var source = match[0];
  var position$1 = Chalk.gray(Curry._2(Printf.sprintf(/* Format */[
                /* Char_literal */Block.__(12, [
                    /* "[" */91,
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Char_literal */Block.__(12, [
                            /* "/" */47,
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* Char_literal */Block.__(12, [
                                    /* "]" */93,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "[%d/%d]"
              ]), position[0], position[1]));
  var packageLocation = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        rootDirectory,
        /* :: */[
          "package.json",
          /* [] */0
        ]
      ]);
  var prefix = Curry._2(Printf.sprintf(/* Format */[
            /* String */Block.__(2, [
                /* No_padding */0,
                /* Char_literal */Block.__(12, [
                    /* " " */32,
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            "Adding postinstall... ",
                            /* End_of_format */0
                          ])
                      ])
                  ])
              ]),
            "%s %sAdding postinstall... "
          ]), position$1, GenericBindings$ReasonTemplate.getEmoji("nut_and_bolt"));
  var postInstallCommand = Curry._2(Printf.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "node -e \"var s='",
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* String_literal */Block.__(11, [
                        "',d='",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "',fs=require('fs');if(fs.existsSync(d)===false){fs.symlinkSync(s,d,'dir')};\"",
                                /* End_of_format */0
                              ])
                          ])
                      ])
                  ])
              ]),
            "node -e \"var s='%s',d='%s',fs=require('fs');if(fs.existsSync(d)===false){fs.symlinkSync(s,d,'dir')};\""
          ]), source, dest);
  var success = +Patches.editPackageScripts(packageLocation, postInstallCommand);
  if (success !== 0) {
    console.log(Curry._2(Printf.sprintf(/* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "%s%s"
                ]), prefix, Chalk.green("success")));
  } else {
    var postInstallCommand$prime = Curry._2(Printf.sprintf(/* Format */[
              /* String_literal */Block.__(11, [
                  "node -e \\\"var s='",
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String_literal */Block.__(11, [
                          "',d='",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  "',fs=require('fs');if(fs.existsSync(d)===false){fs.symlinkSync(s,d,'dir')};\\\"",
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ])
                ]),
              "node -e \\\"var s='%s',d='%s',fs=require('fs');if(fs.existsSync(d)===false){fs.symlinkSync(s,d,'dir')};\\\""
            ]), source, dest);
    var prettyPostInstallCommand = Chalk.bold(Curry._1(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "\"postinstall\": \"",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* Char_literal */Block.__(12, [
                              /* "\"" */34,
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "\"postinstall\": \"%s\""
                ]), postInstallCommand$prime));
    console.log(Curry._4(Printf.sprintf(/* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " Unable to automatically add postinstall script\n",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "Add this to your `package.json` scripts:\n   ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "%s%s Unable to automatically add postinstall script\n%sAdd this to your `package.json` scripts:\n   %s"
                ]), prefix, Chalk.yellow("warning"), GenericBindings$ReasonTemplate.altCodeDirectional, prettyPostInstallCommand));
  }
  return /* true */1;
}

function execute(steps, name, directory, rootDirectory) {
  var total = List.length(steps);
  var finishWithFailure = [/* false */0];
  var loop = function (_steps, _index) {
    while(true) {
      var index = _index;
      var steps = _steps;
      if (steps) {
        var rest = steps[1];
        var cur = steps[0];
        if (rest) {
          var success = Curry._4(cur, /* tuple */[
                index,
                total
              ], name, directory, rootDirectory);
          if (!success) {
            finishWithFailure[0] = /* true */1;
          }
          _index = index + 1 | 0;
          _steps = rest;
          continue ;
          
        } else {
          var success$1 = Curry._4(cur, /* tuple */[
                index,
                total
              ], name, directory, rootDirectory);
          if (success$1) {
            return 0;
          } else {
            finishWithFailure[0] = /* true */1;
            return /* () */0;
          }
        }
      } else {
        return /* () */0;
      }
    };
  };
  loop(steps, 1);
  return finishWithFailure[0];
}

function main(name, directory, rootDirectory, version, linking) {
  console.log(Chalk.bold(Chalk.white(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "add-reason init v",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "add-reason init v%s"
                      ]), version))));
  var stepsAsFunctions = linking ? /* :: */[
      performConfigCreation,
      /* :: */[
        performMerlinCreation,
        /* :: */[
          performEndpointSetup,
          /* :: */[
            performLinking,
            /* :: */[
              performPostInstall,
              /* [] */0
            ]
          ]
        ]
      ]
    ] : /* :: */[
      performConfigCreation,
      /* :: */[
        performMerlinCreation,
        /* :: */[
          performEndpointSetup,
          /* [] */0
        ]
      ]
    ];
  var finishWithFailure = execute(stepsAsFunctions, name, directory, rootDirectory);
  console.log(getCompleteMessage(finishWithFailure, name));
  if (!checkIfBsPlatformIsInstalled(rootDirectory)) {
    var bsPlatform = Chalk.white(Chalk.bold("bs-platform"));
    console.log(Curry._7(Printf.sprintf(/* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String_literal */Block.__(11, [
                          " You don't seem to have ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " installed yet! Run the command:\n",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Char_literal */Block.__(12, [
                                              /* "\n" */10,
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* String_literal */Block.__(11, [
                                                      "  or\n",
                                                      /* String */Block.__(2, [
                                                          /* No_padding */0,
                                                          /* String */Block.__(2, [
                                                              /* No_padding */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "%s You don't seem to have %s installed yet! Run the command:\n%s%s\n%s  or\n%s%s"
                ]), Chalk.yellow("warning"), bsPlatform, GenericBindings$ReasonTemplate.altCodeDirectionalNonTerminal, Chalk.white(Chalk.bold("yarn add bs-platform@2.1.0")), GenericBindings$ReasonTemplate.altLong, GenericBindings$ReasonTemplate.altCodeDirectional, Chalk.white(Chalk.bold("npm install bs-platform@2.1.0"))));
  }
  console.log("");
  return /* () */0;
}

var InitCommand = /* module */[
  /* defaultCompiledPath */defaultCompiledPath,
  /* defaultNodeModulesPath */defaultNodeModulesPath,
  /* bsConfigFile */bsConfigFile,
  /* merlinFile */merlinFile,
  /* buildRelativeSymlinkPaths */buildRelativeSymlinkPaths,
  /* getCompleteMessage */getCompleteMessage,
  /* checkIfBsPlatformIsInstalled */checkIfBsPlatformIsInstalled,
  /* performLinking */performLinking,
  /* performConfigCreation */performConfigCreation,
  /* performMerlinCreation */performMerlinCreation,
  /* performEndpointSetup */performEndpointSetup,
  /* performPostInstall */performPostInstall,
  /* execute */execute,
  /* main */main
];

exports.InitCommand = InitCommand;
/* chalk Not a pure module */
