// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                           = require("bs-platform/lib/js/list.js");
var Block                          = require("bs-platform/lib/js/block.js");
var Curry                          = require("bs-platform/lib/js/curry.js");
var Chalk                          = require("chalk");
var Printf                         = require("bs-platform/lib/js/printf.js");
var Utils$ReasonTemplate           = require("./utils.js");
var GenericBindings$ReasonTemplate = require("./genericBindings.js");

var defaultCompiledDest = "/lib/js";

function getCompleteMessage(finishWithFailure, name) {
  if (finishWithFailure !== 0) {
    return Curry._2(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                " See which step went wrong",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "%s%s See which step went wrong"
                  ]), GenericBindings$ReasonTemplate.getEmoji("no_entry_sign"), Chalk.red("fail"));
  } else {
    var example = Chalk.bold(Curry._1(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "import your compiled code with `const pkg = require('",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "');`",
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "import your compiled code with `const pkg = require('%s');`"
                ]), name));
    return Curry._4(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* " " */32,
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s%s\n%s %s"
                  ]), GenericBindings$ReasonTemplate.getEmoji("sparkles"), Chalk.green("done"), GenericBindings$ReasonTemplate.altCodeDirectional, example);
  }
}

function performLinking(position, name, directory, rootDirectory) {
  var linkToNodeModules = Utils$ReasonTemplate.Path[/* combinePaths */1](/* :: */[
        rootDirectory,
        /* :: */[
          "node_modules",
          /* [] */0
        ]
      ]);
  var source = Utils$ReasonTemplate.Path[/* combinePaths */1](/* :: */[
        rootDirectory,
        /* :: */[
          defaultCompiledDest,
          /* :: */[
            directory,
            /* [] */0
          ]
        ]
      ]);
  var dest = Utils$ReasonTemplate.Path[/* combinePaths */1](/* :: */[
        linkToNodeModules,
        /* :: */[
          name,
          /* [] */0
        ]
      ]);
  return Utils$ReasonTemplate.Fs_Polyfill[/* attemptToLink */1](position, source, dest);
}

function performConfigCreation(position, _, _$1, _$2) {
  var position$1 = Chalk.gray(Curry._2(Printf.sprintf(/* Format */[
                /* Char_literal */Block.__(12, [
                    /* "[" */91,
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Char_literal */Block.__(12, [
                            /* "/" */47,
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* Char_literal */Block.__(12, [
                                    /* "]" */93,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "[%d/%d]"
              ]), position[0], position[1]));
  console.log(Curry._3(Printf.sprintf(/* Format */[
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* Char_literal */Block.__(12, [
                        /* " " */32,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "Creating config... ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "%s %sCreating config... %s"
              ]), position$1, GenericBindings$ReasonTemplate.getEmoji("page_with_curl"), Chalk.green("success")));
  return /* true */1;
}

function execute(steps, name, directory, rootDirectory) {
  var total = List.length(steps);
  var finishWithFailure = [/* false */0];
  var loop = function (_steps, _index) {
    while(true) {
      var index = _index;
      var steps = _steps;
      if (steps) {
        var rest = steps[1];
        var cur = steps[0];
        if (rest) {
          var success = Curry._4(cur, /* tuple */[
                index,
                total
              ], name, directory, rootDirectory);
          if (!success) {
            finishWithFailure[0] = /* true */1;
          }
          _index = index + 1 | 0;
          _steps = rest;
          continue ;
          
        } else {
          var success$1 = Curry._4(cur, /* tuple */[
                index,
                total
              ], name, directory, rootDirectory);
          if (success$1) {
            return 0;
          } else {
            finishWithFailure[0] = /* true */1;
            return /* () */0;
          }
        }
      } else {
        return /* () */0;
      }
    };
  };
  loop(steps, 1);
  return finishWithFailure[0];
}

function main(name, directory, rootDirectory, version) {
  console.log(Chalk.bold(Chalk.white(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "add-reason init v",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "add-reason init v%s"
                      ]), version))));
  var stepsAsFunctions_001 = /* :: */[
    performLinking,
    /* [] */0
  ];
  var stepsAsFunctions = /* :: */[
    performConfigCreation,
    stepsAsFunctions_001
  ];
  var finishWithFailure = execute(stepsAsFunctions, name, directory, rootDirectory);
  console.log(getCompleteMessage(finishWithFailure, name));
  return /* () */0;
}

var InitCommand = /* module */[
  /* defaultCompiledDest */defaultCompiledDest,
  /* getCompleteMessage */getCompleteMessage,
  /* performLinking */performLinking,
  /* performConfigCreation */performConfigCreation,
  /* execute */execute,
  /* main */main
];

exports.InitCommand = InitCommand;
/* chalk Not a pure module */
