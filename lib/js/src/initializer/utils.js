// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                             = require("fs");
var Block                          = require("bs-platform/lib/js/block.js");
var Curry                          = require("bs-platform/lib/js/curry.js");
var Chalk                          = require("chalk");
var Printf                         = require("bs-platform/lib/js/printf.js");
var $$String                       = require("bs-platform/lib/js/string.js");
var GenericBindings$ReasonTemplate = require("./genericBindings.js");

function safeFileExists(file) {
  try {
    +Fs.lstatSync(file);
    return /* true */1;
  }
  catch (exn){
    return /* false */0;
  }
}

function attemptToLink(position, source, dest) {
  var position$1 = Chalk.gray(Curry._2(Printf.sprintf(/* Format */[
                /* Char_literal */Block.__(12, [
                    /* "[" */91,
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Char_literal */Block.__(12, [
                            /* "/" */47,
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    "] ",
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "[%d/%d] "
              ]), position[0], position[1]));
  var existsSource = safeFileExists(source);
  var existsDest = safeFileExists(dest);
  var prefix = position$1 + (GenericBindings$ReasonTemplate.getEmoji("link") + "Linking package... ");
  if (existsSource !== 0) {
    if (existsDest !== 0) {
      console.log(Curry._4(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                " There's already a file here. Did you mean to `unlink`?\n",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s%s There's already a file here. Did you mean to `unlink`?\n%s%s"
                  ]), prefix, Chalk.red("failed"), GenericBindings$ReasonTemplate.altCodeDirectional, Chalk.bold(dest)));
      return /* false */0;
    } else {
      Fs.symlinkSync(source, dest);
      console.log(Curry._2(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "%s%s"
                  ]), prefix, Chalk.green("success")));
      return /* true */1;
    }
  } else if (existsDest !== 0) {
    console.log(Curry._4(Printf.sprintf(/* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " Couldn't find your source directory. Do you have a typo?\n",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "%s%s Couldn't find your source directory. Do you have a typo?\n%s%s"
                ]), prefix, Chalk.red("failed"), GenericBindings$ReasonTemplate.altCodeDirectional, Chalk.bold(source)));
    return /* false */0;
  } else {
    console.log(Curry._6(Printf.sprintf(/* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " Couldn't find either directory. Do you have any typos?\n",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* "\n" */10,
                                          /* String */Block.__(2, [
                                              /* No_padding */0,
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "%s%s Couldn't find either directory. Do you have any typos?\n%s%s\n%s%s"
                ]), prefix, Chalk.red("failed"), GenericBindings$ReasonTemplate.altCodeDirectionalNonTerminal, Chalk.bold(source), GenericBindings$ReasonTemplate.altCodeDirectional, Chalk.bold(dest)));
    return /* false */0;
  }
}

var Fs_Polyfill = /* module */[
  /* safeFileExists */safeFileExists,
  /* attemptToLink */attemptToLink
];

function cleanPath(path) {
  var size = path.length;
  var first = $$String.sub(path, 0, 1);
  var last = $$String.sub(path, size - 1 | 0, 1);
  var starting = first === "/" ? 1 : 0;
  var ending = last === "/" ? (size - starting | 0) - 1 | 0 : size - starting | 0;
  return $$String.sub(path, starting, ending);
}

function combinePaths(paths) {
  var _paths = paths;
  var _result = "";
  while(true) {
    var result = _result;
    var paths$1 = _paths;
    if (paths$1) {
      var rest = paths$1[1];
      var path = paths$1[0];
      if (rest) {
        var result$1 = result + ("/" + cleanPath(path));
        _result = result$1;
        _paths = rest;
        continue ;
        
      } else {
        return result + ("/" + cleanPath(path));
      }
    } else {
      return result;
    }
  };
}

var Path = /* module */[
  /* cleanPath */cleanPath,
  /* combinePaths */combinePaths
];

exports.Fs_Polyfill = Fs_Polyfill;
exports.Path        = Path;
/* fs Not a pure module */
