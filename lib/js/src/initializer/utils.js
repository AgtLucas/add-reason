// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                             = require("fs");
var Chalk                          = require("chalk");
var $$String                       = require("bs-platform/lib/js/string.js");
var GenericBindings$ReasonTemplate = require("./genericBindings.js");

function safeFileExists(file) {
  try {
    +Fs.lstatSync(file);
    return /* true */1;
  }
  catch (exn){
    return /* false */0;
  }
}

function attemptToLink(source, dest) {
  var existsSource = safeFileExists(source);
  var existsDest = safeFileExists(dest);
  if (existsSource !== 0) {
    if (existsDest !== 0) {
      console.log(GenericBindings$ReasonTemplate.getEmoji("paperclip") + (Chalk.red("failed link") + " there's already a file here. Did you mean to `unlink`?"));
      console.log("\t" + dest);
      return /* false */0;
    } else {
      Fs.symlinkSync(source, dest);
      console.log(GenericBindings$ReasonTemplate.getEmoji("paperclip") + Chalk.green("successful link"));
      return /* true */1;
    }
  } else if (existsDest !== 0) {
    console.log(GenericBindings$ReasonTemplate.getEmoji("paperclip") + (Chalk.red("failed link") + " couldn't find your source directory. Do you have a typo?"));
    console.log("\t" + source);
    return /* false */0;
  } else {
    console.log(GenericBindings$ReasonTemplate.getEmoji("paperclip") + (Chalk.red("failed link") + " couldn't find either directory. Do you have typos?"));
    console.log("\t" + source);
    console.log("\t" + dest);
    return /* false */0;
  }
}

function cleanPath(path) {
  var size = path.length;
  var first = $$String.sub(path, 0, 1);
  var last = $$String.sub(path, size - 1 | 0, 1);
  var starting = first === "/" ? 1 : 0;
  var ending = last === "/" ? (size - starting | 0) - 1 | 0 : size - starting | 0;
  return $$String.sub(path, starting, ending);
}

function combinePaths(paths) {
  var _paths = paths;
  var _result = "";
  while(true) {
    var result = _result;
    var paths$1 = _paths;
    if (paths$1) {
      var result$1 = result + ("/" + cleanPath(paths$1[0]));
      _result = result$1;
      _paths = paths$1[1];
      continue ;
      
    } else {
      return result;
    }
  };
}

exports.safeFileExists = safeFileExists;
exports.attemptToLink  = attemptToLink;
exports.cleanPath      = cleanPath;
exports.combinePaths   = combinePaths;
/* fs Not a pure module */
