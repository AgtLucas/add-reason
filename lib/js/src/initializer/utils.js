// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                             = require("fs");
var Chalk                          = require("chalk");
var $$String                       = require("bs-platform/lib/js/string.js");
var Pervasives                     = require("bs-platform/lib/js/pervasives.js");
var GenericBindings$ReasonTemplate = require("./genericBindings.js");

function attemptToLink(source, dest) {
  console.log("CHECKING: " + dest);
  var exists = +Fs.existsSync(dest);
  console.log("EXISTS:   " + Pervasives.string_of_bool(exists));
  if (exists) {
    var msg = GenericBindings$ReasonTemplate.getEmoji("paperclip") + (Chalk.red("failed link") + " there's already a symlink here. Do you mean to `unlink`?");
    console.log(msg);
    return /* false */0;
  } else {
    Fs.symlinkSync(source, dest);
    console.log(Chalk.green("ln") + (" -sv " + (source + (" " + dest))));
    var msg$1 = GenericBindings$ReasonTemplate.getEmoji("paperclip") + Chalk.green("successful link");
    console.log(msg$1);
    return /* true */1;
  }
}

function cleanPath(path) {
  var size = path.length;
  var first = $$String.sub(path, 0, 1);
  var last = $$String.sub(path, size - 1 | 0, 1);
  var starting = first === "/" ? 1 : 0;
  var ending = last === "/" ? (size - starting | 0) - 1 | 0 : size - starting | 0;
  return $$String.sub(path, starting, ending);
}

function combinePaths(beginning, ending) {
  var validBeginning = cleanPath(beginning);
  var validEndling = cleanPath(ending);
  return validBeginning + ("/" + validEndling);
}

exports.attemptToLink = attemptToLink;
exports.cleanPath     = cleanPath;
exports.combinePaths  = combinePaths;
/* fs Not a pure module */
